y<-data.frame(matrix(ncol = 10000, nrow = 1000))
colnames(y) <- paste0("C", c(1:10000))
for (i in 1:10000){
y[i]<-rexp(1000, rate = 1)#rnorm(1000,100,15)
}
dim(y)
z<-colMeans(y)
length(z)
library(ggplot2)
# Plot of actual data
qplot(y[1], geom="histogram", fill = I("red"), col = I("blue"))
# Plot of distribution of means
qplot(z, geom="histogram", fill = I("red"), col = I("blue"))
norm <-rnorm(10000,100,15)
mean(norm)
norm1<-ifelse(norm<115 & norm > 85, "1 SD", ifelse(norm <130 & norm >70, "2 SD", "3SD"))
table<-table(norm1)
table
prop.table(table)
table
prop.table(table)
head(norm1)
gender<-factor(rbinom(10000,1,0.6))
table(gender)
usage<-ifelse(gender==1, rnorm(1,80,7),rnorm(1,60,12))
df<-data.frame(gender, usage)
dim(df)
by(df, df$gender, mean(df$usage))
library(psych)
describeBy(df$usage, df$gender)
install.packages("doBy")
library(doBy)
summaryBy(df$usage~df$gender, data = df, FUN = function(x) { c(m = mean(x), s = sd(x), sm = sum(x)) } )
install.packages("tidyverse")
library(tidyr)
source('~/.active-rstudio-document')
rm(list = ls())
names(mtcars)
mtcars$car <- rownames(mtcars)
names(mtcars)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mtcars <- mutate(mtcars, carName = rownames(mtcars))
library("dplyr", lib.loc="~/R/win-library/3.4")
mtcars <- mutate(mtcars, carName = rownames(mtcars))
source('~/.active-rstudio-document')
mtcars2 <- mutate(mtcars, carName = rownames(mtcars), sample = "dummey")
mtcars3 <- select(mtcars, 13, 1:5, 7, 9)
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
names(mtcars)
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
View(nmtcars)
nmtcars %>% gather(Prashant, MyData, mpg:hp)
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
nmtcars1 <- nmtcars %>% gather(Prashant, MyData, mpg:carb)
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/data802/day2_070717/rScript1.R')
library(swirl)
swirl()
x<-c(44,NA,5,NA)
3*x
y<- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
INf-INf
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >
| 0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
str(vect)
vect
names(vect)
vect2 with c(11,2, NA)
vect2[c(11,2, NA)]
vect2<-c(11,2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2(data = 1:20, nrow = 4, ncol = 5)
my_matrix2<-matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
`colnames(my_data)<-cnames
0
colnames(my_data)<-cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE, FALSE)
TRUE && c(TRUE,FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5> 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
exit
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls<-lapply(flags,class)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list<-sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
quit
exit
swirl()
quit
exit
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dyplr)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-1*5:20
-1*(5:20)
-(5:20)
select(cran, -(x:size))
-(x:size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN
")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > 100500, r_os = "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))!
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count())
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique)
)
View(top_unique_sorted)
submit()
submit()
submit()
view(results3)
View(results3)
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
source('~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber/main.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber/main.R')
setwd("~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber")
source('~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber/main.R')
View(dF)
theSize = dim(dF)
dFNew[1:theSize[1],1] = dF$Data_Source
dFNew[1:theSize[1],2] = "Uber"
dFNew[1:theSize[1],3] = "B02510" # from file name
dFNew[1:theSize[1],4] = NA
dFNew[1:theSize[1],5] = NA
dFNew[1:theSize[1],6] = mdy_hms(as.character(dF$Date.Time), tz =
"America/New_York")
dFNew[1:theSize[1],6] = mdy_hm(as.character(dF$Date.Time), tz =
"America/New_York")
dFNew[1:theSize[1],6] = mdy_hm(as.character(dF$time_of_trip), tz =
"America/New_York")
dFNew[1:theSize[1],8] = dF$start_lat
dFNew[1:theSize[1],9] = dF$start_lng
source('~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber/main.R')
View(dFNew)
source('~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber/main.R')
transLyft <- function(fileName) {
# get file name out of path
if(length(grep("[\\\\]", fileName)) == 0){
print(fileName)
}else{
temp <- strsplit(fileName, "[\\\\]")
tempFileName = temp[[1]][10]
print(tempFileName)
}
# read in .csv
dF <- read.csv(fileName)
dF$Data_Source = tempFileName
# create the empty data frame according to data dictionary revision
# in use
dataDictRevision = 3
dFNew <- getEmptyDf(dataDictRevision)
# str(dFNew)
# populate the empty data frame with data from .csv
theSize = dim(dF)
dFNew[1:theSize[1],1] = dF$Data_Source
dFNew[1:theSize[1],2] = "Uber"
dFNew[1:theSize[1],3] = "B02510" # from file name
dFNew[1:theSize[1],4] = NA
dFNew[1:theSize[1],5] = NA
dFNew[1:theSize[1],6] = mdy_hm(as.character(dF$time_of_trip), tz =
"America/New_York")
dFNew[1:theSize[1],7] = NA
dFNew[1:theSize[1],8] = dF$start_lat
dFNew[1:theSize[1],9] = dF$start_lng
dFNew[1:theSize[1],10] = NA
dFNew[1:theSize[1],11] = NA
dFNew[1:theSize[1],12] = NA
dFNew[1:theSize[1],13] = NA
dFNew[1:theSize[1],14] = NA
dFNew[1:theSize[1],15] = NA
dFNew[1:theSize[1],16] = NA
browser()
return(dFNew)
}
source('~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber/main.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber/main.R')
source('~/fromOtherComp_051117_1731/mSAnalytics/summerProject2017/teamUber/main.R')
sample <- sampSaveCSV(allDataSets, paths, 100, "sample_072017A.csv")
source("sampSaveCSV.R")
sample <- sampSaveCSV(allDataSets, paths, 100, "sample_072017A.csv")
paths <- getPathSEM()
paths <- getPathSEM()
paths <- getPathSEM()
source("getPathSEM.R")
paths <- getPathSEM()
sample <- sampSaveCSV(allDataSets, paths[[4]], 100, "sample_072017A_100.csv")
sample <- sampSaveCSV(allDataSets, paths[[4]], 100, "sample_072017A_100.csv")
source("sampSaveCSV.R")
sample <- sampSaveCSV(allDataSets, paths[[4]], 100, "sample_072017A_100.csv")
set.seed(42)
dFSample <- sample(dF, sampleSize) # sample without replacement
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
paths[[4]]
paths <- getPathSEM()
paths[[4]]
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
set.seed(42)
savePath
set.seed(42)
dFSample <- sample(dF, sampleSize) # sample without replacement
dFSample <- sample(dF, sampleSize) # sample without replacement
dim(dF)
library(dplyr)
dFSample <- sample_n(df, sampleSize) # sample without replacement
dFSample <- sample_n(dF, sampleSize) # sample without replacement
filePath <- paste(savePath, "\\")
write.csv(dFSample, file = "MyData.csv")
filePathAndName <- paste(savePath, "\\", sampSaveFileName)
write.csv(dFSample, file = filePathAndName)
filePathAndName <- paste(savePath, "\\", sampSaveFileName,
sep = "")
filePathAndName
filePathAndName
write.csv(dFSample, file = filePathAndName)
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
function(dF, sampleSize, savePath, sampSaveFileName) {
browser()
if(n == 0){
# do not sample - save whole file
return()
}else{
# sample and save file
set.seed(42)
dFSample <- sample(dF, sampleSize) # sample without replacement
filePath <- paste(savePath, "\\")
write.csv(dFSample, file = "MyData.csv")
return(dFSample)
}
}
source("sampSaveCSV.R")
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
return(NULL)
if(n == 0){
# do not sample - save whole file
write.csv(dF, file = filePathAndName)
return(NULL)
}else{
# sample and save file
set.seed(42)
dFSample <- sample_n(dF, sampleSize)
write.csv(dFSample, file = filePathAndName)
return(dFSample)
}
source("sampSaveCSV.R")
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
if(sampleSize == 0){
# do not sample - save whole file
write.csv(dF, file = filePathAndName)
return(NULL)
}else{
# sample and save file
set.seed(42)
dFSample <- sample_n(dF, sampleSize)
write.csv(dFSample, file = filePathAndName)
return(dFSample)
}
sampSaveCSV <- function(dF, sampleSize, savePath, sampSaveFileName) {
browser()
filePathAndName <- paste(savePath, "\\", sampSaveFileName,
sep = "")
if(sampleSize == 0){
# do not sample - save whole file
write.csv(dF, file = filePathAndName)
return(NULL)
}else{
# sample and save file
set.seed(42)
dFSample <- sample_n(dF, sampleSize)
write.csv(dFSample, file = filePathAndName)
return(dFSample)
}
}
source("sampSaveCSV.R")
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
Q
source("sampSaveCSV.R")
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
filePathAndName <- paste(savePath, "\\", sampSaveFileName,
sep = "")
if(sampleSize == 0){
# do not sample - save whole file
write.csv(dF, file = filePathAndName)
return(NULL)
}else{
# sample and save file
set.seed(42)
dFSample <- sample_n(dF, sampleSize)
write.csv(dFSample, file = filePathAndName)
return(dFSample)
}
sampSaveCSV <- function(dF, sampleSize, savePath, sampSaveFileName) {
browser()
filePathAndName <- paste(savePath, "\\", sampSaveFileName,
sep = "")
if(sampleSize == 0){
# do not sample - save whole file
write.csv(dF, file = filePathAndName)
return(NULL)
}else{
# sample and save file
set.seed(42)
dFSample <- sample_n(dF, sampleSize)
write.csv(dFSample, file = filePathAndName)
return(dFSample)
}
}
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
filePathAndName <- paste(savePath, "\\", sampSaveFileName,
sep = "")
set.seed(42)
dFSample <- sample_n(dF, sampleSize)
write.csv(dFSample, file = filePathAndName)
source("sampSaveCSV.R")
sample <- sampSaveCSV(allDataSets, 100, paths[[4]], "sample_072017A_100.csv")
sample <- sampSaveCSV(allDataSets, 0, paths[[3]], "dataSet_072017.csv")
source("sampSaveCSV.R")
sample <- sampSaveCSV(allDataSets, 0, paths[[3]], "dataSet_072017.csv")
saveDFPath = paste(path[[3]], "\\", "dataSet_072017.Rda", sep = "")
path[[3]]
saveDFPath = paste(paths[[3]], "\\", "dataSet_072017.Rda", sep = "")
saveDFPathAndFileName = paste(paths[[3]], "\\", "dataSet_072017.Rda", sep = "")
save(allDataSets, file = saveDFPathAndFileName)
sample <- sampSaveCSV(allDataSets, 10000, paths[[4]], "sample_072017A_10000.csv")
